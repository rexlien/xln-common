allprojects {

    repositories {

        maven {url "https://dl.bintray.com/rlien-2/java"}
        jcenter()
        maven {url "https://repo.spring.io/milestone/"}
        maven {url "https://repo.spring.io/plugins-release/"}
        maven {url "http://oss.jfrog.org/artifactory/oss-snapshot-local"}

    }

    tasks.withType(ScalaCompile) {
        sourceCompatibility = "1.8"
        targetCompatibility = "1.8"
    }
}

subprojects {
    tasks.withType(ScalaCompile) {
        sourceCompatibility = "1.8"
        targetCompatibility = "1.8"
    }
}


buildscript {

    repositories {

        jcenter()
    }

    ext {
        boot_version = '2.3.0.RELEASE'
        spring_version = '5.2.6.RELEASE'
        //scala_version = '2.13.0'
        versions = [:]
        libs = [:]

        versions += [
                protobuf: "3.11.0",
                grpc : "1.26.0",
        ]

        enable_webflux = true
        //enable_cache = false
        xlnImplement = { set ->

            if(set instanceof GString) {
                project.dependencies {
                    implementation set
                }
            } else if(set instanceof List) {
                set.collect {
                    def str = it
                    if(str instanceof xln.gradle.Dependency) {
                        xln.gradle.Dependency dep = str
                        project.dependencies {
                            implementation(dep.module) {
                                if(dep.exclude != null) {

                                    //print("hello, $dep.exclude")
                                    exclude module: dep.exclude
                                }

                            }
                        }
                    } else {
                        project.dependencies {
                            implementation str
                        }
                    }
                }
            }
        }

        xlnCompileOnly = { set ->

            if(set instanceof GString) {
                project.dependencies {
                    implementation set
                }
            } else if(set instanceof List) {
                set.collect {
                    def str = it
                    if(str instanceof xln.gradle.Dependency) {
                        xln.gradle.Dependency dep = str
                        project.dependencies {
                            compileOnly(dep.module) {


                            }
                        }
                    } else {
                        project.dependencies {
                            compileOnly str
                        }
                    }
                }
            }
        }
    }

    protobuf {

        protoc {
            artifact = "com.google.protobuf:protoc:$versions.protobuf"
        }
        plugins {
            grpc {
                artifact = "io.grpc:protoc-gen-grpc-java:$versions.grpc"
            }
            grpckt {
                artifact = "io.grpc:protoc-gen-grpc-kotlin:0.1.4"
            }
        }
        generateProtoTasks {
            all()*.plugins { grpc {
                //outputSubDir = 'java'
                }
                grpckt {

                }
            }
        }
        //generatedFilesBaseDir = "$projectDir/src"
        
    }

    sourceSets {
        main {
            java {
                srcDirs 'build/generated/source/proto/main/grpc'
                srcDirs 'build/generated/source/proto/main/java'
                srcDirs 'build/generated/source/proto/main/grpckt'
            }

            groovy {
                srcDirs 'buildSrc/src/main/groovy'
            }


        }
    }



}


apply plugin:'groovy'
apply plugin:'java'
apply plugin:'war'
apply plugin:'scala'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'project-report'

